# https://aka.ms/yaml

trigger:
  branches:
    include: [ master ] # branch names which will trigger a build
  tags:
    include: [ v* ] # tag names which will trigger a build

pr:
  branches:
    include: [ master ] # branch names which will trigger a build

pool:
  vmImage: 'ubuntu-latest'

variables:
  REG_URL: 'docker.pkg.github.com/sumitsaiwal'
  IMAGE_NAME: 'fibonacci_flask'
  isPush: $[in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/tags/v')]

steps:
- task: Docker@2
  displayName: 'Build Image'
  inputs:
    repository: '$(IMAGE_NAME)'
    command: 'build'
    Dockerfile: 'Dockerfile'
    tags: 'latest'
    addPipelineData: false

- script: |
    if [ -f docker-compose.test.yaml ]; then
      docker-compose --file docker-compose.test.yaml run sut
      exitcode=$?
      docker-compose --file docker-compose.test.yaml down
      exit $exitcode
    else
      echo "`docker-compose.test.yaml` not found, nothing to run."
    fi
  displayName: 'Run tests'


- script: |
    IMAGE_ID=$(Build.Repository.Name)/$(IMAGE_NAME)
    
    # Change all uppercase to lowercase
    IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
    # Strip git ref prefix from version
    VERSION=$(echo "$(Build.SourceBranch)" | sed -e 's,.*/\(.*\),\1,')
    # Strip "v" prefix from tag name
    [[ "$(Build.SourceBranch)" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
    # Use Docker `latest` tag convention
    [ "$VERSION" == "master" ] && VERSION=latest

    # Add new pipeline variables
    echo "##vso[task.setvariable variable=IMAGE_ID]${IMAGE_ID}"
    echo "##vso[task.setvariable variable=VERSION]${VERSION}"

    # tag docker image
    echo "tagging $(IMAGE_NAME) to $(REG_URL)/${IMAGE_ID}:${VERSION}"
    docker tag $(IMAGE_NAME) "$(REG_URL)/${IMAGE_ID}:${VERSION}"
  displayName: 'Tag Image'
  condition: and(succeeded(), eq(variables.isPush, true))
    
- task: Docker@2
  inputs:
    containerRegistry: 'GithubDocker'
    repository: '$(IMAGE_ID)'
    command: 'push'
    tags: '$(VERSION)'
    addPipelineData: false
  displayName: 'Push Image'
  condition: and(succeeded(), eq(variables.isPush, true))


